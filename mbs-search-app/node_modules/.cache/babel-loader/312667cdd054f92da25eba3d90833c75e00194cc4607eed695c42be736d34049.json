{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { fetchAllResultsForExport } from '../services/searchService';\nimport { downloadFile, convertToCSV, escapeCSV } from '../utils';\nimport { EXPORT_CONFIG, UI_CONFIG } from '../config';\n\n/**\n * Custom hook for handling data exports\n * @returns {Object} Export methods and state\n */\nconst useExport = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [exportProgress, setExportProgress] = useState({\n    show: false,\n    progress: 0\n  });\n  const [exportStatus, setExportStatus] = useState({\n    show: false,\n    message: '',\n    type: 'success'\n  });\n\n  // Listen for progress events\n  useEffect(() => {\n    const progressListener = event => {\n      if (event.detail && typeof event.detail.progress === 'number') {\n        setExportProgress({\n          show: true,\n          progress: event.detail.progress\n        });\n      }\n    };\n    window.addEventListener('export-progress', progressListener);\n    return () => {\n      window.removeEventListener('export-progress', progressListener);\n    };\n  }, []);\n\n  /**\n   * Export search results to a file\n   * @param {string} format - Export format (csv or json)\n   * @param {string} query - Search query\n   * @param {Object} selectedFacets - Selected facet filters\n   * @param {string} sortBy - Sort option\n   * @param {boolean} fuzzyEnabled - Whether fuzzy search is enabled\n   * @param {number} totalCount - Total count of results\n   * @returns {Promise<void>}\n   */\n  const exportResults = useCallback(async (format, query, selectedFacets, sortBy, fuzzyEnabled, totalCount) => {\n    if (totalCount === 0) {\n      setExportStatus({\n        show: true,\n        message: 'No results to export',\n        type: 'error'\n      });\n      return;\n    }\n    try {\n      setLoading(true);\n      setExportProgress({\n        show: true,\n        progress: 5\n      });\n\n      // Fetch all results for export\n      const allResults = await fetchAllResultsForExport(query, selectedFacets, sortBy, 'simple', fuzzyEnabled ? 2 : 0);\n      if (allResults.length === 0) {\n        setExportStatus({\n          show: true,\n          message: 'No results to export',\n          type: 'error'\n        });\n        setExportProgress({\n          show: false,\n          progress: 0\n        });\n        return;\n      }\n      setExportProgress({\n        show: true,\n        progress: 75\n      });\n      const filename = `${EXPORT_CONFIG.FILENAME_PREFIX}-${new Date().toISOString().slice(0, 10)}`;\n      if (format === EXPORT_CONFIG.FORMATS.CSV) {\n        // Map each item to a CSV row\n        const rowMapper = item => [item.ItemNum || '', escapeCSV(item.Description || ''), item.ScheduleFee || '', escapeCSV(item.CategoryDescription || ''), escapeCSV(item.GroupDescription || ''), item.ItemType || '', formatDate(item.ItemStartDate)].join(',');\n\n        // Create CSV content\n        const csvContent = convertToCSV(EXPORT_CONFIG.CSV_HEADERS, allResults, rowMapper);\n        setExportProgress({\n          show: true,\n          progress: 90\n        });\n\n        // Create a blob and download\n        const blob = new Blob([csvContent], {\n          type: 'text/csv;charset=utf-8;'\n        });\n        downloadFile(blob, `${filename}.csv`);\n\n        // Show success message\n        setExportStatus({\n          show: true,\n          message: `Successfully exported ${allResults.length} items to CSV`,\n          type: 'success'\n        });\n      } else if (format === EXPORT_CONFIG.FORMATS.JSON) {\n        // Create a simplified version of the results for JSON export\n        const jsonData = allResults.map(item => {\n          const result = {};\n\n          // Map fields according to the configuration\n          Object.entries(EXPORT_CONFIG.JSON_FIELDS).forEach(([sourceField, targetField]) => {\n            result[targetField] = sourceField === 'ItemStartDate' ? formatDate(item[sourceField]) : item[sourceField];\n          });\n          return result;\n        });\n        setExportProgress({\n          show: true,\n          progress: 90\n        });\n\n        // Create a blob and download\n        const blob = new Blob([JSON.stringify(jsonData, null, 2)], {\n          type: 'application/json'\n        });\n        downloadFile(blob, `${filename}.json`);\n\n        // Show success message\n        setExportStatus({\n          show: true,\n          message: `Successfully exported ${allResults.length} items to JSON`,\n          type: 'success'\n        });\n      }\n      setExportProgress({\n        show: true,\n        progress: 100\n      });\n\n      // Hide the progress bar after animation completes\n      setTimeout(() => {\n        setExportProgress({\n          show: false,\n          progress: 0\n        });\n      }, UI_CONFIG.PROGRESS_ANIMATION_DURATION);\n\n      // Hide the status message after set duration\n      setTimeout(() => {\n        setExportStatus({\n          show: false,\n          message: '',\n          type: 'success'\n        });\n      }, UI_CONFIG.TOAST_DURATION);\n    } catch (error) {\n      console.error('Error exporting results:', error);\n      setExportProgress({\n        show: false,\n        progress: 0\n      });\n      setExportStatus({\n        show: true,\n        message: `Error exporting results: ${error.message}`,\n        type: 'error'\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Format a date for display\n   * @param {string} dateString - ISO date string\n   * @returns {string} - Formatted date string\n   */\n  const formatDate = dateString => {\n    if (!dateString) return '';\n    return new Date(dateString).toLocaleDateString('en-AU');\n  };\n  return {\n    loading,\n    exportProgress,\n    exportStatus,\n    exportResults,\n    setExportStatus\n  };\n};\n_s(useExport, \"/trjpwBMzYRB+K0XCxv5ywxEZUM=\");\nexport default useExport;","map":{"version":3,"names":["useState","useEffect","useCallback","fetchAllResultsForExport","downloadFile","convertToCSV","escapeCSV","EXPORT_CONFIG","UI_CONFIG","useExport","_s","loading","setLoading","exportProgress","setExportProgress","show","progress","exportStatus","setExportStatus","message","type","progressListener","event","detail","window","addEventListener","removeEventListener","exportResults","format","query","selectedFacets","sortBy","fuzzyEnabled","totalCount","allResults","length","filename","FILENAME_PREFIX","Date","toISOString","slice","FORMATS","CSV","rowMapper","item","ItemNum","Description","ScheduleFee","CategoryDescription","GroupDescription","ItemType","formatDate","ItemStartDate","join","csvContent","CSV_HEADERS","blob","Blob","JSON","jsonData","map","result","Object","entries","JSON_FIELDS","forEach","sourceField","targetField","stringify","setTimeout","PROGRESS_ANIMATION_DURATION","TOAST_DURATION","error","console","dateString","toLocaleDateString"],"sources":["C:/Projects/MBSSearchReact/mbs-search-app/src/hooks/useExport.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { fetchAllResultsForExport } from '../services/searchService';\nimport { downloadFile, convertToCSV, escapeCSV } from '../utils';\nimport { EXPORT_CONFIG, UI_CONFIG } from '../config';\n\n/**\n * Custom hook for handling data exports\n * @returns {Object} Export methods and state\n */\nconst useExport = () => {\n  const [loading, setLoading] = useState(false);\n  const [exportProgress, setExportProgress] = useState({ show: false, progress: 0 });\n  const [exportStatus, setExportStatus] = useState({ show: false, message: '', type: 'success' });\n\n  // Listen for progress events\n  useEffect(() => {\n    const progressListener = (event) => {\n      if (event.detail && typeof event.detail.progress === 'number') {\n        setExportProgress({ \n          show: true, \n          progress: event.detail.progress \n        });\n      }\n    };\n    \n    window.addEventListener('export-progress', progressListener);\n    \n    return () => {\n      window.removeEventListener('export-progress', progressListener);\n    };\n  }, []);\n\n  /**\n   * Export search results to a file\n   * @param {string} format - Export format (csv or json)\n   * @param {string} query - Search query\n   * @param {Object} selectedFacets - Selected facet filters\n   * @param {string} sortBy - Sort option\n   * @param {boolean} fuzzyEnabled - Whether fuzzy search is enabled\n   * @param {number} totalCount - Total count of results\n   * @returns {Promise<void>}\n   */\n  const exportResults = useCallback(async (format, query, selectedFacets, sortBy, fuzzyEnabled, totalCount) => {\n    if (totalCount === 0) {\n      setExportStatus({\n        show: true,\n        message: 'No results to export',\n        type: 'error'\n      });\n      return;\n    }\n    \n    try {\n      setLoading(true);\n      setExportProgress({ show: true, progress: 5 });\n      \n      // Fetch all results for export\n      const allResults = await fetchAllResultsForExport(\n        query, \n        selectedFacets, \n        sortBy, \n        'simple', \n        fuzzyEnabled ? 2 : 0\n      );\n      \n      if (allResults.length === 0) {\n        setExportStatus({\n          show: true,\n          message: 'No results to export',\n          type: 'error'\n        });\n        setExportProgress({ show: false, progress: 0 });\n        return;\n      }\n      \n      setExportProgress({ show: true, progress: 75 });\n      \n      const filename = `${EXPORT_CONFIG.FILENAME_PREFIX}-${new Date().toISOString().slice(0, 10)}`;\n      \n      if (format === EXPORT_CONFIG.FORMATS.CSV) {\n        // Map each item to a CSV row\n        const rowMapper = (item) => [\n          item.ItemNum || '',\n          escapeCSV(item.Description || ''),\n          item.ScheduleFee || '',\n          escapeCSV(item.CategoryDescription || ''),\n          escapeCSV(item.GroupDescription || ''),\n          item.ItemType || '',\n          formatDate(item.ItemStartDate)\n        ].join(',');\n        \n        // Create CSV content\n        const csvContent = convertToCSV(\n          EXPORT_CONFIG.CSV_HEADERS,\n          allResults,\n          rowMapper\n        );\n        \n        setExportProgress({ show: true, progress: 90 });\n        \n        // Create a blob and download\n        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n        downloadFile(blob, `${filename}.csv`);\n        \n        // Show success message\n        setExportStatus({\n          show: true,\n          message: `Successfully exported ${allResults.length} items to CSV`,\n          type: 'success'\n        });\n      } else if (format === EXPORT_CONFIG.FORMATS.JSON) {\n        // Create a simplified version of the results for JSON export\n        const jsonData = allResults.map(item => {\n          const result = {};\n          \n          // Map fields according to the configuration\n          Object.entries(EXPORT_CONFIG.JSON_FIELDS).forEach(([sourceField, targetField]) => {\n            result[targetField] = sourceField === 'ItemStartDate' \n              ? formatDate(item[sourceField])\n              : item[sourceField];\n          });\n          \n          return result;\n        });\n        \n        setExportProgress({ show: true, progress: 90 });\n        \n        // Create a blob and download\n        const blob = new Blob([JSON.stringify(jsonData, null, 2)], { type: 'application/json' });\n        downloadFile(blob, `${filename}.json`);\n        \n        // Show success message\n        setExportStatus({\n          show: true,\n          message: `Successfully exported ${allResults.length} items to JSON`,\n          type: 'success'\n        });\n      }\n      \n      setExportProgress({ show: true, progress: 100 });\n      \n      // Hide the progress bar after animation completes\n      setTimeout(() => {\n        setExportProgress({ show: false, progress: 0 });\n      }, UI_CONFIG.PROGRESS_ANIMATION_DURATION);\n      \n      // Hide the status message after set duration\n      setTimeout(() => {\n        setExportStatus({ show: false, message: '', type: 'success' });\n      }, UI_CONFIG.TOAST_DURATION);\n    } catch (error) {\n      console.error('Error exporting results:', error);\n      setExportProgress({ show: false, progress: 0 });\n      setExportStatus({\n        show: true,\n        message: `Error exporting results: ${error.message}`,\n        type: 'error'\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Format a date for display\n   * @param {string} dateString - ISO date string\n   * @returns {string} - Formatted date string\n   */\n  const formatDate = (dateString) => {\n    if (!dateString) return '';\n    return new Date(dateString).toLocaleDateString('en-AU');\n  };\n\n  return {\n    loading,\n    exportProgress,\n    exportStatus,\n    exportResults,\n    setExportStatus\n  };\n};\n\nexport default useExport;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}