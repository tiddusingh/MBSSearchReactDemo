{"ast":null,"code":"// Azure Cognitive Search service configuration\nimport { SEARCH_CONFIG, SEARCH_SETTINGS } from '../config';\nimport { getSortParams, emitProgressEvent } from '../utils';\n\n/**\n * Search for MBS items using Azure Cognitive Search\n * @param {string} query - The search query\n * @param {Object} selectedFacets - Selected facet filters\n * @param {number} page - Current page number\n * @param {string} sortBy - Sort option\n * @param {string} queryType - Query type (simple or semantic)\n * @param {number} fuzzyLevel - Fuzzy search level (0-3, where 0 means no fuzzy search)\n * @returns {Promise<Object>} - Search results, facets, and count\n */\nexport const searchItems = async (query, selectedFacets = {}, page = 1, sortBy = 'relevance', queryType = 'simple', fuzzyLevel = 0) => {\n  try {\n    console.log('Searching with query:', query);\n    console.log('API Endpoint:', SEARCH_CONFIG.API_ENDPOINT);\n    console.log('Index Name:', SEARCH_CONFIG.INDEX_NAME);\n    console.log('Query Type:', queryType);\n    console.log('Fuzzy Level:', fuzzyLevel);\n\n    // Check if the query is likely an item number (only contains digits)\n    const isItemNumberSearch = query && /^\\d+$/.test(query.trim());\n\n    // Build the search request\n    const searchRequest = {\n      search: query || '*',\n      // Use '*' for empty queries to return all results\n      queryType: 'simple',\n      // Default to simple query type\n      searchFields: SEARCH_SETTINGS.SEARCH_FIELDS.join(','),\n      // Search in configured fields\n      select: SEARCH_SETTINGS.SELECT_FIELDS.join(','),\n      count: true,\n      facets: SEARCH_SETTINGS.FACET_FIELDS,\n      skip: (page - 1) * SEARCH_SETTINGS.PAGE_SIZE,\n      top: SEARCH_SETTINGS.PAGE_SIZE,\n      highlight: SEARCH_SETTINGS.HIGHLIGHT_SETTINGS.FIELDS.join(','),\n      highlightPreTag: SEARCH_SETTINGS.HIGHLIGHT_SETTINGS.PRE_TAG,\n      highlightPostTag: SEARCH_SETTINGS.HIGHLIGHT_SETTINGS.POST_TAG\n    };\n\n    // For item number searches, prioritize exact matches\n    if (isItemNumberSearch) {\n      console.log('Item number search detected');\n      searchRequest.searchMode = 'all'; // Match all terms (AND operator)\n\n      // If the search is for an item number, we want exact matches to be prioritized\n      if (queryType !== 'semantic') {\n        searchRequest.queryType = 'full';\n        searchRequest.search = `ItemNum:${query.trim()}^4 ${query.trim()}`;\n      }\n    }\n    // Add fuzzy search if enabled and not an item number search\n    else if (fuzzyLevel > 0 && fuzzyLevel <= 3) {\n      searchRequest.searchMode = 'all'; // Match all terms (AND operator)\n      searchRequest.queryType = 'full'; // Use full Lucene query syntax for fuzzy search\n\n      // Reformat query for fuzzy search if it's not empty\n      if (query && query.trim() !== '') {\n        // Split the query into words and add fuzzy operator to each\n        const words = query.trim().split(/\\s+/);\n        const fuzzyQuery = words.map(word => `${word}~${fuzzyLevel}`).join(' ');\n        searchRequest.search = fuzzyQuery;\n        console.log('Fuzzy query:', fuzzyQuery);\n      }\n    }\n    // Add semantic search configuration if queryType is semantic and fuzzy search is not enabled\n    else if (queryType === 'semantic') {\n      searchRequest.queryType = 'semantic';\n      searchRequest.queryLanguage = 'en-us';\n      searchRequest.semanticConfiguration = 'default';\n      searchRequest.answers = 'extractive|count-3';\n      searchRequest.captions = 'extractive|highlight-false';\n    }\n\n    // Add filters based on selected facets\n    if (Object.keys(selectedFacets).length > 0) {\n      const filterExpressions = buildFilterExpressions(selectedFacets);\n      if (filterExpressions.length > 0) {\n        searchRequest.filter = filterExpressions.join(' and ');\n      }\n    }\n\n    // Add sorting based on the selected option\n    searchRequest.orderby = getSortParams(sortBy, query);\n    console.log('Search request:', JSON.stringify(searchRequest, null, 2));\n\n    // Make the search request\n    const response = await fetch(`${SEARCH_CONFIG.API_ENDPOINT}/indexes/${SEARCH_CONFIG.INDEX_NAME}/docs/search?api-version=${SEARCH_CONFIG.API_VERSION}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'api-key': SEARCH_CONFIG.API_KEY\n      },\n      body: JSON.stringify(searchRequest)\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Search API error response:', errorText);\n      throw await handleApiError(response, errorText);\n    }\n    const data = await response.json();\n    console.log('Search API response:', data);\n\n    // Process facets\n    const facets = processFacets(data['@search.facets'], selectedFacets);\n\n    // Process results and add highlighted text if available\n    const processedResults = processResults(data.value);\n\n    // Process semantic answers if available\n    let semanticAnswers = processSemanticAnswers(data['@search.answers']);\n\n    // Process semantic captions if available\n    if (data['@search.captions']) {\n      processedResults.forEach((item, index) => {\n        if (data.value[index]['@search.captions']) {\n          item.caption = data.value[index]['@search.captions'].text;\n        }\n      });\n    }\n    return {\n      results: processedResults,\n      facets: facets,\n      count: data['@odata.count'] || 0,\n      semanticAnswers: semanticAnswers\n    };\n  } catch (error) {\n    console.error('Error searching items:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch all search results for export\n * @param {string} query - The search query\n * @param {Object} selectedFacets - Selected facet filters\n * @param {string} sortBy - Sort option\n * @param {string} queryType - Query type (simple or semantic)\n * @param {number} fuzzyLevel - Fuzzy search level (0-3, where 0 means no fuzzy search)\n * @returns {Promise<Array>} - All search results\n */\nexport const fetchAllResultsForExport = async (query, selectedFacets = {}, sortBy = 'relevance', queryType = 'simple', fuzzyLevel = 0) => {\n  try {\n    console.log('Fetching all results for export with query:', query);\n\n    // First, get the total count of results\n    const totalCount = await getResultCount(query, selectedFacets, queryType, fuzzyLevel);\n\n    // Emit progress event\n    emitProgressEvent(10);\n\n    // If no results, return empty array\n    if (totalCount === 0) {\n      return [];\n    }\n\n    // Now fetch all results in batches\n    const batchSize = SEARCH_SETTINGS.MAX_BATCH_SIZE; // Azure Search max batch size\n    const batches = Math.ceil(totalCount / batchSize);\n    let allResults = [];\n\n    // Build the base search request\n    const baseSearchRequest = buildBaseSearchRequest(query, selectedFacets, sortBy, queryType, fuzzyLevel);\n\n    // Fetch all batches\n    for (let i = 0; i < batches; i++) {\n      const skip = i * batchSize;\n      const searchRequest = {\n        ...baseSearchRequest,\n        skip: skip\n      };\n      console.log(`Fetching batch ${i + 1}/${batches} (skip: ${skip}, top: ${batchSize})`);\n\n      // Calculate and emit progress (10-70% range for fetching)\n      const progressPercent = 10 + Math.round(i / batches * 60);\n      emitProgressEvent(progressPercent);\n      const response = await fetch(`${SEARCH_CONFIG.API_ENDPOINT}/indexes/${SEARCH_CONFIG.INDEX_NAME}/docs/search?api-version=${SEARCH_CONFIG.API_VERSION}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'api-key': SEARCH_CONFIG.API_KEY\n        },\n        body: JSON.stringify(searchRequest)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`Export API error response (batch ${i + 1}):`, errorText);\n        throw await handleApiError(response, errorText);\n      }\n      const data = await response.json();\n      console.log(`Batch ${i + 1} results: ${data.value.length}`);\n\n      // Add results from this batch\n      allResults = [...allResults, ...data.value];\n    }\n    console.log(`Total results fetched for export: ${allResults.length}`);\n    return allResults;\n  } catch (error) {\n    console.error('Error fetching all results for export:', error);\n    throw error;\n  }\n};\n\n/**\n * Get the total count of results for a query\n * @param {string} query - The search query\n * @param {Object} selectedFacets - Selected facet filters\n * @param {string} queryType - Query type (simple or semantic)\n * @param {number} fuzzyLevel - Fuzzy search level\n * @returns {Promise<number>} - Total count of results\n */\nasync function getResultCount(query, selectedFacets, queryType, fuzzyLevel) {\n  const countRequest = {\n    search: query || '*',\n    queryType: 'simple',\n    // Default to simple query type\n    searchFields: SEARCH_SETTINGS.SEARCH_FIELDS.join(','),\n    select: 'MBSItemId',\n    // Just need one field for count\n    count: true,\n    skip: 0,\n    top: 1 // Just need one result to get the count\n  };\n\n  // Add fuzzy search if enabled\n  if (fuzzyLevel > 0 && fuzzyLevel <= 3) {\n    countRequest.searchMode = 'all';\n    countRequest.queryType = 'full';\n    if (query && query.trim() !== '') {\n      const words = query.trim().split(/\\s+/);\n      const fuzzyQuery = words.map(word => `${word}~${fuzzyLevel}`).join(' ');\n      countRequest.search = fuzzyQuery;\n    }\n  }\n  // Add semantic search configuration if queryType is semantic and fuzzy search is not enabled\n  else if (queryType === 'semantic') {\n    countRequest.queryType = 'semantic';\n    countRequest.queryLanguage = 'en-us';\n    countRequest.semanticConfiguration = 'default';\n    countRequest.answers = 'extractive|count-3';\n    countRequest.captions = 'extractive|highlight-false';\n  }\n\n  // Add filters based on selected facets\n  if (Object.keys(selectedFacets).length > 0) {\n    const filterExpressions = buildFilterExpressions(selectedFacets);\n    if (filterExpressions.length > 0) {\n      countRequest.filter = filterExpressions.join(' and ');\n    }\n  }\n\n  // Get the count\n  const countResponse = await fetch(`${SEARCH_CONFIG.API_ENDPOINT}/indexes/${SEARCH_CONFIG.INDEX_NAME}/docs/search?api-version=${SEARCH_CONFIG.API_VERSION}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'api-key': SEARCH_CONFIG.API_KEY\n    },\n    body: JSON.stringify(countRequest)\n  });\n  if (!countResponse.ok) {\n    throw new Error(`Count API error: ${countResponse.status} ${countResponse.statusText}`);\n  }\n  const countData = await countResponse.json();\n  const totalCount = countData['@odata.count'] || 0;\n  console.log(`Total results to export: ${totalCount}`);\n  return totalCount;\n}\n\n/**\n * Build base search request for export\n * @param {string} query - The search query\n * @param {Object} selectedFacets - Selected facet filters\n * @param {string} sortBy - Sort option\n * @param {string} queryType - Query type\n * @param {number} fuzzyLevel - Fuzzy search level\n * @returns {Object} - Base search request\n */\nfunction buildBaseSearchRequest(query, selectedFacets, sortBy, queryType, fuzzyLevel) {\n  const baseSearchRequest = {\n    search: query || '*',\n    queryType: 'simple',\n    // Default to simple query type\n    searchFields: SEARCH_SETTINGS.SEARCH_FIELDS.join(','),\n    select: SEARCH_SETTINGS.SELECT_FIELDS.join(','),\n    count: false,\n    top: SEARCH_SETTINGS.MAX_BATCH_SIZE\n  };\n\n  // Add fuzzy search if enabled\n  if (fuzzyLevel > 0 && fuzzyLevel <= 3) {\n    baseSearchRequest.searchMode = 'all';\n    baseSearchRequest.queryType = 'full';\n    if (query && query.trim() !== '') {\n      const words = query.trim().split(/\\s+/);\n      const fuzzyQuery = words.map(word => `${word}~${fuzzyLevel}`).join(' ');\n      baseSearchRequest.search = fuzzyQuery;\n    }\n  }\n  // Add semantic search configuration if queryType is semantic and fuzzy search is not enabled\n  else if (queryType === 'semantic') {\n    baseSearchRequest.queryType = 'semantic';\n    baseSearchRequest.queryLanguage = 'en-us';\n    baseSearchRequest.semanticConfiguration = 'default';\n    baseSearchRequest.answers = 'extractive|count-3';\n    baseSearchRequest.captions = 'extractive|highlight-false';\n  }\n\n  // Add filters based on selected facets\n  if (Object.keys(selectedFacets).length > 0) {\n    const filterExpressions = buildFilterExpressions(selectedFacets);\n    if (filterExpressions.length > 0) {\n      baseSearchRequest.filter = filterExpressions.join(' and ');\n    }\n  }\n\n  // Add sorting based on the selected option\n  baseSearchRequest.orderby = getSortParams(sortBy, query);\n  return baseSearchRequest;\n}\n\n/**\n * Build filter expressions for Azure Search\n * @param {Object} selectedFacets - Selected facet filters\n * @returns {Array} - Filter expressions\n */\nfunction buildFilterExpressions(selectedFacets) {\n  const filterExpressions = [];\n  for (const [facetName, facetValues] of Object.entries(selectedFacets)) {\n    if (facetValues.length > 0) {\n      const facetFilters = facetValues.map(value => {\n        if (facetName === 'NewItem' || facetName === 'FeeChange' || facetName === 'ItemChange') {\n          return `${facetName} eq '${value}'`;\n        } else {\n          return `${facetName} eq '${value.replace(/'/g, \"''\")}'`;\n        }\n      });\n      filterExpressions.push(`(${facetFilters.join(' or ')})`);\n    }\n  }\n  return filterExpressions;\n}\n\n/**\n * Process facets from search results\n * @param {Object} searchFacets - Facets from search results\n * @param {Object} selectedFacets - Selected facet filters\n * @returns {Object} - Processed facets\n */\nfunction processFacets(searchFacets, selectedFacets) {\n  const facets = {};\n  if (searchFacets) {\n    for (const [facetName, facetValues] of Object.entries(searchFacets)) {\n      if (SEARCH_SETTINGS.FACET_FIELDS.includes(facetName)) {\n        facets[facetName] = facetValues.map(facet => {\n          var _selectedFacets$facet;\n          return {\n            value: facet.value,\n            count: facet.count,\n            selected: ((_selectedFacets$facet = selectedFacets[facetName]) === null || _selectedFacets$facet === void 0 ? void 0 : _selectedFacets$facet.includes(facet.value)) || false\n          };\n        });\n      }\n    }\n  }\n  return facets;\n}\n\n/**\n * Process search results\n * @param {Array} results - Search results\n * @returns {Array} - Processed results\n */\nfunction processResults(results) {\n  return results.map(item => {\n    // Check if this item has highlights in the response\n    if (item['@search.highlights'] && item['@search.highlights'].Description && item['@search.highlights'].Description.length > 0) {\n      return {\n        ...item,\n        highlightedDescription: item['@search.highlights'].Description[0]\n      };\n    }\n    return item;\n  });\n}\n\n/**\n * Process semantic answers from search results\n * @param {Array} answers - Semantic answers\n * @returns {Array|null} - Processed semantic answers\n */\nfunction processSemanticAnswers(answers) {\n  if (!answers) return null;\n  return answers.map(answer => ({\n    text: answer.text,\n    highlights: answer.highlights,\n    score: answer.score\n  }));\n}\n\n/**\n * Handle API error responses\n * @param {Response} response - Fetch response\n * @param {string} errorText - Error text\n * @returns {Error} - Error object\n */\nasync function handleApiError(response, errorText) {\n  try {\n    var _errorData$error;\n    const errorData = JSON.parse(errorText);\n    return new Error(`API error: ${((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || response.statusText}`);\n  } catch (parseError) {\n    return new Error(`API error: ${response.status} ${response.statusText}`);\n  }\n}","map":{"version":3,"names":["SEARCH_CONFIG","SEARCH_SETTINGS","getSortParams","emitProgressEvent","searchItems","query","selectedFacets","page","sortBy","queryType","fuzzyLevel","console","log","API_ENDPOINT","INDEX_NAME","isItemNumberSearch","test","trim","searchRequest","search","searchFields","SEARCH_FIELDS","join","select","SELECT_FIELDS","count","facets","FACET_FIELDS","skip","PAGE_SIZE","top","highlight","HIGHLIGHT_SETTINGS","FIELDS","highlightPreTag","PRE_TAG","highlightPostTag","POST_TAG","searchMode","words","split","fuzzyQuery","map","word","queryLanguage","semanticConfiguration","answers","captions","Object","keys","length","filterExpressions","buildFilterExpressions","filter","orderby","JSON","stringify","response","fetch","API_VERSION","method","headers","API_KEY","body","ok","errorText","text","error","handleApiError","data","json","processFacets","processedResults","processResults","value","semanticAnswers","processSemanticAnswers","forEach","item","index","caption","results","fetchAllResultsForExport","totalCount","getResultCount","batchSize","MAX_BATCH_SIZE","batches","Math","ceil","allResults","baseSearchRequest","buildBaseSearchRequest","i","progressPercent","round","countRequest","countResponse","Error","status","statusText","countData","facetName","facetValues","entries","facetFilters","replace","push","searchFacets","includes","facet","_selectedFacets$facet","selected","Description","highlightedDescription","answer","highlights","score","_errorData$error","errorData","parse","message","parseError"],"sources":["C:/Projects/MBSSearchReact/mbs-search-app/src/services/searchService.js"],"sourcesContent":["// Azure Cognitive Search service configuration\nimport { SEARCH_CONFIG, SEARCH_SETTINGS } from '../config';\nimport { getSortParams, emitProgressEvent } from '../utils';\n\n/**\n * Search for MBS items using Azure Cognitive Search\n * @param {string} query - The search query\n * @param {Object} selectedFacets - Selected facet filters\n * @param {number} page - Current page number\n * @param {string} sortBy - Sort option\n * @param {string} queryType - Query type (simple or semantic)\n * @param {number} fuzzyLevel - Fuzzy search level (0-3, where 0 means no fuzzy search)\n * @returns {Promise<Object>} - Search results, facets, and count\n */\nexport const searchItems = async (query, selectedFacets = {}, page = 1, sortBy = 'relevance', queryType = 'simple', fuzzyLevel = 0) => {\n  try {\n    console.log('Searching with query:', query);\n    console.log('API Endpoint:', SEARCH_CONFIG.API_ENDPOINT);\n    console.log('Index Name:', SEARCH_CONFIG.INDEX_NAME);\n    console.log('Query Type:', queryType);\n    console.log('Fuzzy Level:', fuzzyLevel);\n    \n    // Check if the query is likely an item number (only contains digits)\n    const isItemNumberSearch = query && /^\\d+$/.test(query.trim());\n    \n    // Build the search request\n    const searchRequest = {\n      search: query || '*', // Use '*' for empty queries to return all results\n      queryType: 'simple', // Default to simple query type\n      searchFields: SEARCH_SETTINGS.SEARCH_FIELDS.join(','), // Search in configured fields\n      select: SEARCH_SETTINGS.SELECT_FIELDS.join(','),\n      count: true,\n      facets: SEARCH_SETTINGS.FACET_FIELDS,\n      skip: (page - 1) * SEARCH_SETTINGS.PAGE_SIZE,\n      top: SEARCH_SETTINGS.PAGE_SIZE,\n      highlight: SEARCH_SETTINGS.HIGHLIGHT_SETTINGS.FIELDS.join(','),\n      highlightPreTag: SEARCH_SETTINGS.HIGHLIGHT_SETTINGS.PRE_TAG,\n      highlightPostTag: SEARCH_SETTINGS.HIGHLIGHT_SETTINGS.POST_TAG\n    };\n\n    // For item number searches, prioritize exact matches\n    if (isItemNumberSearch) {\n      console.log('Item number search detected');\n      searchRequest.searchMode = 'all'; // Match all terms (AND operator)\n      \n      // If the search is for an item number, we want exact matches to be prioritized\n      if (queryType !== 'semantic') {\n        searchRequest.queryType = 'full';\n        searchRequest.search = `ItemNum:${query.trim()}^4 ${query.trim()}`;\n      }\n    }\n    // Add fuzzy search if enabled and not an item number search\n    else if (fuzzyLevel > 0 && fuzzyLevel <= 3) {\n      searchRequest.searchMode = 'all'; // Match all terms (AND operator)\n      searchRequest.queryType = 'full'; // Use full Lucene query syntax for fuzzy search\n      \n      // Reformat query for fuzzy search if it's not empty\n      if (query && query.trim() !== '') {\n        // Split the query into words and add fuzzy operator to each\n        const words = query.trim().split(/\\s+/);\n        const fuzzyQuery = words.map(word => `${word}~${fuzzyLevel}`).join(' ');\n        searchRequest.search = fuzzyQuery;\n        console.log('Fuzzy query:', fuzzyQuery);\n      }\n    } \n    // Add semantic search configuration if queryType is semantic and fuzzy search is not enabled\n    else if (queryType === 'semantic') {\n      searchRequest.queryType = 'semantic';\n      searchRequest.queryLanguage = 'en-us';\n      searchRequest.semanticConfiguration = 'default';\n      searchRequest.answers = 'extractive|count-3';\n      searchRequest.captions = 'extractive|highlight-false';\n    }\n\n    // Add filters based on selected facets\n    if (Object.keys(selectedFacets).length > 0) {\n      const filterExpressions = buildFilterExpressions(selectedFacets);\n      if (filterExpressions.length > 0) {\n        searchRequest.filter = filterExpressions.join(' and ');\n      }\n    }\n\n    // Add sorting based on the selected option\n    searchRequest.orderby = getSortParams(sortBy, query);\n\n    console.log('Search request:', JSON.stringify(searchRequest, null, 2));\n\n    // Make the search request\n    const response = await fetch(\n      `${SEARCH_CONFIG.API_ENDPOINT}/indexes/${SEARCH_CONFIG.INDEX_NAME}/docs/search?api-version=${SEARCH_CONFIG.API_VERSION}`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'api-key': SEARCH_CONFIG.API_KEY\n        },\n        body: JSON.stringify(searchRequest)\n      }\n    );\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Search API error response:', errorText);\n      throw await handleApiError(response, errorText);\n    }\n\n    const data = await response.json();\n    console.log('Search API response:', data);\n\n    // Process facets\n    const facets = processFacets(data['@search.facets'], selectedFacets);\n\n    // Process results and add highlighted text if available\n    const processedResults = processResults(data.value);\n\n    // Process semantic answers if available\n    let semanticAnswers = processSemanticAnswers(data['@search.answers']);\n\n    // Process semantic captions if available\n    if (data['@search.captions']) {\n      processedResults.forEach((item, index) => {\n        if (data.value[index]['@search.captions']) {\n          item.caption = data.value[index]['@search.captions'].text;\n        }\n      });\n    }\n\n    return {\n      results: processedResults,\n      facets: facets,\n      count: data['@odata.count'] || 0,\n      semanticAnswers: semanticAnswers\n    };\n  } catch (error) {\n    console.error('Error searching items:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch all search results for export\n * @param {string} query - The search query\n * @param {Object} selectedFacets - Selected facet filters\n * @param {string} sortBy - Sort option\n * @param {string} queryType - Query type (simple or semantic)\n * @param {number} fuzzyLevel - Fuzzy search level (0-3, where 0 means no fuzzy search)\n * @returns {Promise<Array>} - All search results\n */\nexport const fetchAllResultsForExport = async (query, selectedFacets = {}, sortBy = 'relevance', queryType = 'simple', fuzzyLevel = 0) => {\n  try {\n    console.log('Fetching all results for export with query:', query);\n    \n    // First, get the total count of results\n    const totalCount = await getResultCount(query, selectedFacets, queryType, fuzzyLevel);\n    \n    // Emit progress event\n    emitProgressEvent(10);\n    \n    // If no results, return empty array\n    if (totalCount === 0) {\n      return [];\n    }\n    \n    // Now fetch all results in batches\n    const batchSize = SEARCH_SETTINGS.MAX_BATCH_SIZE; // Azure Search max batch size\n    const batches = Math.ceil(totalCount / batchSize);\n    let allResults = [];\n    \n    // Build the base search request\n    const baseSearchRequest = buildBaseSearchRequest(query, selectedFacets, sortBy, queryType, fuzzyLevel);\n    \n    // Fetch all batches\n    for (let i = 0; i < batches; i++) {\n      const skip = i * batchSize;\n      const searchRequest = {\n        ...baseSearchRequest,\n        skip: skip\n      };\n      \n      console.log(`Fetching batch ${i+1}/${batches} (skip: ${skip}, top: ${batchSize})`);\n      \n      // Calculate and emit progress (10-70% range for fetching)\n      const progressPercent = 10 + Math.round((i / batches) * 60);\n      emitProgressEvent(progressPercent);\n      \n      const response = await fetch(\n        `${SEARCH_CONFIG.API_ENDPOINT}/indexes/${SEARCH_CONFIG.INDEX_NAME}/docs/search?api-version=${SEARCH_CONFIG.API_VERSION}`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'api-key': SEARCH_CONFIG.API_KEY\n          },\n          body: JSON.stringify(searchRequest)\n        }\n      );\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`Export API error response (batch ${i+1}):`, errorText);\n        throw await handleApiError(response, errorText);\n      }\n      \n      const data = await response.json();\n      console.log(`Batch ${i+1} results: ${data.value.length}`);\n      \n      // Add results from this batch\n      allResults = [...allResults, ...data.value];\n    }\n    \n    console.log(`Total results fetched for export: ${allResults.length}`);\n    return allResults;\n  } catch (error) {\n    console.error('Error fetching all results for export:', error);\n    throw error;\n  }\n};\n\n/**\n * Get the total count of results for a query\n * @param {string} query - The search query\n * @param {Object} selectedFacets - Selected facet filters\n * @param {string} queryType - Query type (simple or semantic)\n * @param {number} fuzzyLevel - Fuzzy search level\n * @returns {Promise<number>} - Total count of results\n */\nasync function getResultCount(query, selectedFacets, queryType, fuzzyLevel) {\n  const countRequest = {\n    search: query || '*',\n    queryType: 'simple', // Default to simple query type\n    searchFields: SEARCH_SETTINGS.SEARCH_FIELDS.join(','),\n    select: 'MBSItemId', // Just need one field for count\n    count: true,\n    skip: 0,\n    top: 1, // Just need one result to get the count\n  };\n  \n  // Add fuzzy search if enabled\n  if (fuzzyLevel > 0 && fuzzyLevel <= 3) {\n    countRequest.searchMode = 'all';\n    countRequest.queryType = 'full';\n    \n    if (query && query.trim() !== '') {\n      const words = query.trim().split(/\\s+/);\n      const fuzzyQuery = words.map(word => `${word}~${fuzzyLevel}`).join(' ');\n      countRequest.search = fuzzyQuery;\n    }\n  }\n  // Add semantic search configuration if queryType is semantic and fuzzy search is not enabled\n  else if (queryType === 'semantic') {\n    countRequest.queryType = 'semantic';\n    countRequest.queryLanguage = 'en-us';\n    countRequest.semanticConfiguration = 'default';\n    countRequest.answers = 'extractive|count-3';\n    countRequest.captions = 'extractive|highlight-false';\n  }\n  \n  // Add filters based on selected facets\n  if (Object.keys(selectedFacets).length > 0) {\n    const filterExpressions = buildFilterExpressions(selectedFacets);\n    if (filterExpressions.length > 0) {\n      countRequest.filter = filterExpressions.join(' and ');\n    }\n  }\n  \n  // Get the count\n  const countResponse = await fetch(\n    `${SEARCH_CONFIG.API_ENDPOINT}/indexes/${SEARCH_CONFIG.INDEX_NAME}/docs/search?api-version=${SEARCH_CONFIG.API_VERSION}`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'api-key': SEARCH_CONFIG.API_KEY\n      },\n      body: JSON.stringify(countRequest)\n    }\n  );\n  \n  if (!countResponse.ok) {\n    throw new Error(`Count API error: ${countResponse.status} ${countResponse.statusText}`);\n  }\n  \n  const countData = await countResponse.json();\n  const totalCount = countData['@odata.count'] || 0;\n  console.log(`Total results to export: ${totalCount}`);\n  \n  return totalCount;\n}\n\n/**\n * Build base search request for export\n * @param {string} query - The search query\n * @param {Object} selectedFacets - Selected facet filters\n * @param {string} sortBy - Sort option\n * @param {string} queryType - Query type\n * @param {number} fuzzyLevel - Fuzzy search level\n * @returns {Object} - Base search request\n */\nfunction buildBaseSearchRequest(query, selectedFacets, sortBy, queryType, fuzzyLevel) {\n  const baseSearchRequest = {\n    search: query || '*',\n    queryType: 'simple', // Default to simple query type\n    searchFields: SEARCH_SETTINGS.SEARCH_FIELDS.join(','),\n    select: SEARCH_SETTINGS.SELECT_FIELDS.join(','),\n    count: false,\n    top: SEARCH_SETTINGS.MAX_BATCH_SIZE,\n  };\n  \n  // Add fuzzy search if enabled\n  if (fuzzyLevel > 0 && fuzzyLevel <= 3) {\n    baseSearchRequest.searchMode = 'all';\n    baseSearchRequest.queryType = 'full';\n    \n    if (query && query.trim() !== '') {\n      const words = query.trim().split(/\\s+/);\n      const fuzzyQuery = words.map(word => `${word}~${fuzzyLevel}`).join(' ');\n      baseSearchRequest.search = fuzzyQuery;\n    }\n  }\n  // Add semantic search configuration if queryType is semantic and fuzzy search is not enabled\n  else if (queryType === 'semantic') {\n    baseSearchRequest.queryType = 'semantic';\n    baseSearchRequest.queryLanguage = 'en-us';\n    baseSearchRequest.semanticConfiguration = 'default';\n    baseSearchRequest.answers = 'extractive|count-3';\n    baseSearchRequest.captions = 'extractive|highlight-false';\n  }\n  \n  // Add filters based on selected facets\n  if (Object.keys(selectedFacets).length > 0) {\n    const filterExpressions = buildFilterExpressions(selectedFacets);\n    if (filterExpressions.length > 0) {\n      baseSearchRequest.filter = filterExpressions.join(' and ');\n    }\n  }\n  \n  // Add sorting based on the selected option\n  baseSearchRequest.orderby = getSortParams(sortBy, query);\n  \n  return baseSearchRequest;\n}\n\n/**\n * Build filter expressions for Azure Search\n * @param {Object} selectedFacets - Selected facet filters\n * @returns {Array} - Filter expressions\n */\nfunction buildFilterExpressions(selectedFacets) {\n  const filterExpressions = [];\n  \n  for (const [facetName, facetValues] of Object.entries(selectedFacets)) {\n    if (facetValues.length > 0) {\n      const facetFilters = facetValues.map(value => {\n        if (facetName === 'NewItem' || facetName === 'FeeChange' || facetName === 'ItemChange') {\n          return `${facetName} eq '${value}'`;\n        } else {\n          return `${facetName} eq '${value.replace(/'/g, \"''\")}'`;\n        }\n      });\n      \n      filterExpressions.push(`(${facetFilters.join(' or ')})`);\n    }\n  }\n  \n  return filterExpressions;\n}\n\n/**\n * Process facets from search results\n * @param {Object} searchFacets - Facets from search results\n * @param {Object} selectedFacets - Selected facet filters\n * @returns {Object} - Processed facets\n */\nfunction processFacets(searchFacets, selectedFacets) {\n  const facets = {};\n  if (searchFacets) {\n    for (const [facetName, facetValues] of Object.entries(searchFacets)) {\n      if (SEARCH_SETTINGS.FACET_FIELDS.includes(facetName)) {\n        facets[facetName] = facetValues.map(facet => ({\n          value: facet.value,\n          count: facet.count,\n          selected: selectedFacets[facetName]?.includes(facet.value) || false\n        }));\n      }\n    }\n  }\n  return facets;\n}\n\n/**\n * Process search results\n * @param {Array} results - Search results\n * @returns {Array} - Processed results\n */\nfunction processResults(results) {\n  return results.map(item => {\n    // Check if this item has highlights in the response\n    if (item['@search.highlights'] && \n        item['@search.highlights'].Description && \n        item['@search.highlights'].Description.length > 0) {\n      return {\n        ...item,\n        highlightedDescription: item['@search.highlights'].Description[0]\n      };\n    }\n    return item;\n  });\n}\n\n/**\n * Process semantic answers from search results\n * @param {Array} answers - Semantic answers\n * @returns {Array|null} - Processed semantic answers\n */\nfunction processSemanticAnswers(answers) {\n  if (!answers) return null;\n  \n  return answers.map(answer => ({\n    text: answer.text,\n    highlights: answer.highlights,\n    score: answer.score\n  }));\n}\n\n/**\n * Handle API error responses\n * @param {Response} response - Fetch response\n * @param {string} errorText - Error text\n * @returns {Error} - Error object\n */\nasync function handleApiError(response, errorText) {\n  try {\n    const errorData = JSON.parse(errorText);\n    return new Error(`API error: ${errorData.error?.message || response.statusText}`);\n  } catch (parseError) {\n    return new Error(`API error: ${response.status} ${response.statusText}`);\n  }\n}\n"],"mappings":"AAAA;AACA,SAASA,aAAa,EAAEC,eAAe,QAAQ,WAAW;AAC1D,SAASC,aAAa,EAAEC,iBAAiB,QAAQ,UAAU;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,KAAK,EAAEC,cAAc,GAAG,CAAC,CAAC,EAAEC,IAAI,GAAG,CAAC,EAAEC,MAAM,GAAG,WAAW,EAAEC,SAAS,GAAG,QAAQ,EAAEC,UAAU,GAAG,CAAC,KAAK;EACrI,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEP,KAAK,CAAC;IAC3CM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEZ,aAAa,CAACa,YAAY,CAAC;IACxDF,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEZ,aAAa,CAACc,UAAU,CAAC;IACpDH,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEH,SAAS,CAAC;IACrCE,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,UAAU,CAAC;;IAEvC;IACA,MAAMK,kBAAkB,GAAGV,KAAK,IAAI,OAAO,CAACW,IAAI,CAACX,KAAK,CAACY,IAAI,CAAC,CAAC,CAAC;;IAE9D;IACA,MAAMC,aAAa,GAAG;MACpBC,MAAM,EAAEd,KAAK,IAAI,GAAG;MAAE;MACtBI,SAAS,EAAE,QAAQ;MAAE;MACrBW,YAAY,EAAEnB,eAAe,CAACoB,aAAa,CAACC,IAAI,CAAC,GAAG,CAAC;MAAE;MACvDC,MAAM,EAAEtB,eAAe,CAACuB,aAAa,CAACF,IAAI,CAAC,GAAG,CAAC;MAC/CG,KAAK,EAAE,IAAI;MACXC,MAAM,EAAEzB,eAAe,CAAC0B,YAAY;MACpCC,IAAI,EAAE,CAACrB,IAAI,GAAG,CAAC,IAAIN,eAAe,CAAC4B,SAAS;MAC5CC,GAAG,EAAE7B,eAAe,CAAC4B,SAAS;MAC9BE,SAAS,EAAE9B,eAAe,CAAC+B,kBAAkB,CAACC,MAAM,CAACX,IAAI,CAAC,GAAG,CAAC;MAC9DY,eAAe,EAAEjC,eAAe,CAAC+B,kBAAkB,CAACG,OAAO;MAC3DC,gBAAgB,EAAEnC,eAAe,CAAC+B,kBAAkB,CAACK;IACvD,CAAC;;IAED;IACA,IAAItB,kBAAkB,EAAE;MACtBJ,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1CM,aAAa,CAACoB,UAAU,GAAG,KAAK,CAAC,CAAC;;MAElC;MACA,IAAI7B,SAAS,KAAK,UAAU,EAAE;QAC5BS,aAAa,CAACT,SAAS,GAAG,MAAM;QAChCS,aAAa,CAACC,MAAM,GAAG,WAAWd,KAAK,CAACY,IAAI,CAAC,CAAC,MAAMZ,KAAK,CAACY,IAAI,CAAC,CAAC,EAAE;MACpE;IACF;IACA;IAAA,KACK,IAAIP,UAAU,GAAG,CAAC,IAAIA,UAAU,IAAI,CAAC,EAAE;MAC1CQ,aAAa,CAACoB,UAAU,GAAG,KAAK,CAAC,CAAC;MAClCpB,aAAa,CAACT,SAAS,GAAG,MAAM,CAAC,CAAC;;MAElC;MACA,IAAIJ,KAAK,IAAIA,KAAK,CAACY,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAChC;QACA,MAAMsB,KAAK,GAAGlC,KAAK,CAACY,IAAI,CAAC,CAAC,CAACuB,KAAK,CAAC,KAAK,CAAC;QACvC,MAAMC,UAAU,GAAGF,KAAK,CAACG,GAAG,CAACC,IAAI,IAAI,GAAGA,IAAI,IAAIjC,UAAU,EAAE,CAAC,CAACY,IAAI,CAAC,GAAG,CAAC;QACvEJ,aAAa,CAACC,MAAM,GAAGsB,UAAU;QACjC9B,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE6B,UAAU,CAAC;MACzC;IACF;IACA;IAAA,KACK,IAAIhC,SAAS,KAAK,UAAU,EAAE;MACjCS,aAAa,CAACT,SAAS,GAAG,UAAU;MACpCS,aAAa,CAAC0B,aAAa,GAAG,OAAO;MACrC1B,aAAa,CAAC2B,qBAAqB,GAAG,SAAS;MAC/C3B,aAAa,CAAC4B,OAAO,GAAG,oBAAoB;MAC5C5B,aAAa,CAAC6B,QAAQ,GAAG,4BAA4B;IACvD;;IAEA;IACA,IAAIC,MAAM,CAACC,IAAI,CAAC3C,cAAc,CAAC,CAAC4C,MAAM,GAAG,CAAC,EAAE;MAC1C,MAAMC,iBAAiB,GAAGC,sBAAsB,CAAC9C,cAAc,CAAC;MAChE,IAAI6C,iBAAiB,CAACD,MAAM,GAAG,CAAC,EAAE;QAChChC,aAAa,CAACmC,MAAM,GAAGF,iBAAiB,CAAC7B,IAAI,CAAC,OAAO,CAAC;MACxD;IACF;;IAEA;IACAJ,aAAa,CAACoC,OAAO,GAAGpD,aAAa,CAACM,MAAM,EAAEH,KAAK,CAAC;IAEpDM,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE2C,IAAI,CAACC,SAAS,CAACtC,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;;IAEtE;IACA,MAAMuC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAG1D,aAAa,CAACa,YAAY,YAAYb,aAAa,CAACc,UAAU,4BAA4Bd,aAAa,CAAC2D,WAAW,EAAE,EACxH;MACEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,SAAS,EAAE7D,aAAa,CAAC8D;MAC3B,CAAC;MACDC,IAAI,EAAER,IAAI,CAACC,SAAS,CAACtC,aAAa;IACpC,CACF,CAAC;IAED,IAAI,CAACuC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvCvD,OAAO,CAACwD,KAAK,CAAC,4BAA4B,EAAEF,SAAS,CAAC;MACtD,MAAM,MAAMG,cAAc,CAACX,QAAQ,EAAEQ,SAAS,CAAC;IACjD;IAEA,MAAMI,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;IAClC3D,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEyD,IAAI,CAAC;;IAEzC;IACA,MAAM3C,MAAM,GAAG6C,aAAa,CAACF,IAAI,CAAC,gBAAgB,CAAC,EAAE/D,cAAc,CAAC;;IAEpE;IACA,MAAMkE,gBAAgB,GAAGC,cAAc,CAACJ,IAAI,CAACK,KAAK,CAAC;;IAEnD;IACA,IAAIC,eAAe,GAAGC,sBAAsB,CAACP,IAAI,CAAC,iBAAiB,CAAC,CAAC;;IAErE;IACA,IAAIA,IAAI,CAAC,kBAAkB,CAAC,EAAE;MAC5BG,gBAAgB,CAACK,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;QACxC,IAAIV,IAAI,CAACK,KAAK,CAACK,KAAK,CAAC,CAAC,kBAAkB,CAAC,EAAE;UACzCD,IAAI,CAACE,OAAO,GAAGX,IAAI,CAACK,KAAK,CAACK,KAAK,CAAC,CAAC,kBAAkB,CAAC,CAACb,IAAI;QAC3D;MACF,CAAC,CAAC;IACJ;IAEA,OAAO;MACLe,OAAO,EAAET,gBAAgB;MACzB9C,MAAM,EAAEA,MAAM;MACdD,KAAK,EAAE4C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;MAChCM,eAAe,EAAEA;IACnB,CAAC;EACH,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdxD,OAAO,CAACwD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMe,wBAAwB,GAAG,MAAAA,CAAO7E,KAAK,EAAEC,cAAc,GAAG,CAAC,CAAC,EAAEE,MAAM,GAAG,WAAW,EAAEC,SAAS,GAAG,QAAQ,EAAEC,UAAU,GAAG,CAAC,KAAK;EACxI,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAEP,KAAK,CAAC;;IAEjE;IACA,MAAM8E,UAAU,GAAG,MAAMC,cAAc,CAAC/E,KAAK,EAAEC,cAAc,EAAEG,SAAS,EAAEC,UAAU,CAAC;;IAErF;IACAP,iBAAiB,CAAC,EAAE,CAAC;;IAErB;IACA,IAAIgF,UAAU,KAAK,CAAC,EAAE;MACpB,OAAO,EAAE;IACX;;IAEA;IACA,MAAME,SAAS,GAAGpF,eAAe,CAACqF,cAAc,CAAC,CAAC;IAClD,MAAMC,OAAO,GAAGC,IAAI,CAACC,IAAI,CAACN,UAAU,GAAGE,SAAS,CAAC;IACjD,IAAIK,UAAU,GAAG,EAAE;;IAEnB;IACA,MAAMC,iBAAiB,GAAGC,sBAAsB,CAACvF,KAAK,EAAEC,cAAc,EAAEE,MAAM,EAAEC,SAAS,EAAEC,UAAU,CAAC;;IAEtG;IACA,KAAK,IAAImF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,OAAO,EAAEM,CAAC,EAAE,EAAE;MAChC,MAAMjE,IAAI,GAAGiE,CAAC,GAAGR,SAAS;MAC1B,MAAMnE,aAAa,GAAG;QACpB,GAAGyE,iBAAiB;QACpB/D,IAAI,EAAEA;MACR,CAAC;MAEDjB,OAAO,CAACC,GAAG,CAAC,kBAAkBiF,CAAC,GAAC,CAAC,IAAIN,OAAO,WAAW3D,IAAI,UAAUyD,SAAS,GAAG,CAAC;;MAElF;MACA,MAAMS,eAAe,GAAG,EAAE,GAAGN,IAAI,CAACO,KAAK,CAAEF,CAAC,GAAGN,OAAO,GAAI,EAAE,CAAC;MAC3DpF,iBAAiB,CAAC2F,eAAe,CAAC;MAElC,MAAMrC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAG1D,aAAa,CAACa,YAAY,YAAYb,aAAa,CAACc,UAAU,4BAA4Bd,aAAa,CAAC2D,WAAW,EAAE,EACxH;QACEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,SAAS,EAAE7D,aAAa,CAAC8D;QAC3B,CAAC;QACDC,IAAI,EAAER,IAAI,CAACC,SAAS,CAACtC,aAAa;MACpC,CACF,CAAC;MAED,IAAI,CAACuC,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QACvCvD,OAAO,CAACwD,KAAK,CAAC,oCAAoC0B,CAAC,GAAC,CAAC,IAAI,EAAE5B,SAAS,CAAC;QACrE,MAAM,MAAMG,cAAc,CAACX,QAAQ,EAAEQ,SAAS,CAAC;MACjD;MAEA,MAAMI,IAAI,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;MAClC3D,OAAO,CAACC,GAAG,CAAC,SAASiF,CAAC,GAAC,CAAC,aAAaxB,IAAI,CAACK,KAAK,CAACxB,MAAM,EAAE,CAAC;;MAEzD;MACAwC,UAAU,GAAG,CAAC,GAAGA,UAAU,EAAE,GAAGrB,IAAI,CAACK,KAAK,CAAC;IAC7C;IAEA/D,OAAO,CAACC,GAAG,CAAC,qCAAqC8E,UAAU,CAACxC,MAAM,EAAE,CAAC;IACrE,OAAOwC,UAAU;EACnB,CAAC,CAAC,OAAOvB,KAAK,EAAE;IACdxD,OAAO,CAACwD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeiB,cAAcA,CAAC/E,KAAK,EAAEC,cAAc,EAAEG,SAAS,EAAEC,UAAU,EAAE;EAC1E,MAAMsF,YAAY,GAAG;IACnB7E,MAAM,EAAEd,KAAK,IAAI,GAAG;IACpBI,SAAS,EAAE,QAAQ;IAAE;IACrBW,YAAY,EAAEnB,eAAe,CAACoB,aAAa,CAACC,IAAI,CAAC,GAAG,CAAC;IACrDC,MAAM,EAAE,WAAW;IAAE;IACrBE,KAAK,EAAE,IAAI;IACXG,IAAI,EAAE,CAAC;IACPE,GAAG,EAAE,CAAC,CAAE;EACV,CAAC;;EAED;EACA,IAAIpB,UAAU,GAAG,CAAC,IAAIA,UAAU,IAAI,CAAC,EAAE;IACrCsF,YAAY,CAAC1D,UAAU,GAAG,KAAK;IAC/B0D,YAAY,CAACvF,SAAS,GAAG,MAAM;IAE/B,IAAIJ,KAAK,IAAIA,KAAK,CAACY,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAChC,MAAMsB,KAAK,GAAGlC,KAAK,CAACY,IAAI,CAAC,CAAC,CAACuB,KAAK,CAAC,KAAK,CAAC;MACvC,MAAMC,UAAU,GAAGF,KAAK,CAACG,GAAG,CAACC,IAAI,IAAI,GAAGA,IAAI,IAAIjC,UAAU,EAAE,CAAC,CAACY,IAAI,CAAC,GAAG,CAAC;MACvE0E,YAAY,CAAC7E,MAAM,GAAGsB,UAAU;IAClC;EACF;EACA;EAAA,KACK,IAAIhC,SAAS,KAAK,UAAU,EAAE;IACjCuF,YAAY,CAACvF,SAAS,GAAG,UAAU;IACnCuF,YAAY,CAACpD,aAAa,GAAG,OAAO;IACpCoD,YAAY,CAACnD,qBAAqB,GAAG,SAAS;IAC9CmD,YAAY,CAAClD,OAAO,GAAG,oBAAoB;IAC3CkD,YAAY,CAACjD,QAAQ,GAAG,4BAA4B;EACtD;;EAEA;EACA,IAAIC,MAAM,CAACC,IAAI,CAAC3C,cAAc,CAAC,CAAC4C,MAAM,GAAG,CAAC,EAAE;IAC1C,MAAMC,iBAAiB,GAAGC,sBAAsB,CAAC9C,cAAc,CAAC;IAChE,IAAI6C,iBAAiB,CAACD,MAAM,GAAG,CAAC,EAAE;MAChC8C,YAAY,CAAC3C,MAAM,GAAGF,iBAAiB,CAAC7B,IAAI,CAAC,OAAO,CAAC;IACvD;EACF;;EAEA;EACA,MAAM2E,aAAa,GAAG,MAAMvC,KAAK,CAC/B,GAAG1D,aAAa,CAACa,YAAY,YAAYb,aAAa,CAACc,UAAU,4BAA4Bd,aAAa,CAAC2D,WAAW,EAAE,EACxH;IACEC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,SAAS,EAAE7D,aAAa,CAAC8D;IAC3B,CAAC;IACDC,IAAI,EAAER,IAAI,CAACC,SAAS,CAACwC,YAAY;EACnC,CACF,CAAC;EAED,IAAI,CAACC,aAAa,CAACjC,EAAE,EAAE;IACrB,MAAM,IAAIkC,KAAK,CAAC,oBAAoBD,aAAa,CAACE,MAAM,IAAIF,aAAa,CAACG,UAAU,EAAE,CAAC;EACzF;EAEA,MAAMC,SAAS,GAAG,MAAMJ,aAAa,CAAC3B,IAAI,CAAC,CAAC;EAC5C,MAAMa,UAAU,GAAGkB,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC;EACjD1F,OAAO,CAACC,GAAG,CAAC,4BAA4BuE,UAAU,EAAE,CAAC;EAErD,OAAOA,UAAU;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,sBAAsBA,CAACvF,KAAK,EAAEC,cAAc,EAAEE,MAAM,EAAEC,SAAS,EAAEC,UAAU,EAAE;EACpF,MAAMiF,iBAAiB,GAAG;IACxBxE,MAAM,EAAEd,KAAK,IAAI,GAAG;IACpBI,SAAS,EAAE,QAAQ;IAAE;IACrBW,YAAY,EAAEnB,eAAe,CAACoB,aAAa,CAACC,IAAI,CAAC,GAAG,CAAC;IACrDC,MAAM,EAAEtB,eAAe,CAACuB,aAAa,CAACF,IAAI,CAAC,GAAG,CAAC;IAC/CG,KAAK,EAAE,KAAK;IACZK,GAAG,EAAE7B,eAAe,CAACqF;EACvB,CAAC;;EAED;EACA,IAAI5E,UAAU,GAAG,CAAC,IAAIA,UAAU,IAAI,CAAC,EAAE;IACrCiF,iBAAiB,CAACrD,UAAU,GAAG,KAAK;IACpCqD,iBAAiB,CAAClF,SAAS,GAAG,MAAM;IAEpC,IAAIJ,KAAK,IAAIA,KAAK,CAACY,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAChC,MAAMsB,KAAK,GAAGlC,KAAK,CAACY,IAAI,CAAC,CAAC,CAACuB,KAAK,CAAC,KAAK,CAAC;MACvC,MAAMC,UAAU,GAAGF,KAAK,CAACG,GAAG,CAACC,IAAI,IAAI,GAAGA,IAAI,IAAIjC,UAAU,EAAE,CAAC,CAACY,IAAI,CAAC,GAAG,CAAC;MACvEqE,iBAAiB,CAACxE,MAAM,GAAGsB,UAAU;IACvC;EACF;EACA;EAAA,KACK,IAAIhC,SAAS,KAAK,UAAU,EAAE;IACjCkF,iBAAiB,CAAClF,SAAS,GAAG,UAAU;IACxCkF,iBAAiB,CAAC/C,aAAa,GAAG,OAAO;IACzC+C,iBAAiB,CAAC9C,qBAAqB,GAAG,SAAS;IACnD8C,iBAAiB,CAAC7C,OAAO,GAAG,oBAAoB;IAChD6C,iBAAiB,CAAC5C,QAAQ,GAAG,4BAA4B;EAC3D;;EAEA;EACA,IAAIC,MAAM,CAACC,IAAI,CAAC3C,cAAc,CAAC,CAAC4C,MAAM,GAAG,CAAC,EAAE;IAC1C,MAAMC,iBAAiB,GAAGC,sBAAsB,CAAC9C,cAAc,CAAC;IAChE,IAAI6C,iBAAiB,CAACD,MAAM,GAAG,CAAC,EAAE;MAChCyC,iBAAiB,CAACtC,MAAM,GAAGF,iBAAiB,CAAC7B,IAAI,CAAC,OAAO,CAAC;IAC5D;EACF;;EAEA;EACAqE,iBAAiB,CAACrC,OAAO,GAAGpD,aAAa,CAACM,MAAM,EAAEH,KAAK,CAAC;EAExD,OAAOsF,iBAAiB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASvC,sBAAsBA,CAAC9C,cAAc,EAAE;EAC9C,MAAM6C,iBAAiB,GAAG,EAAE;EAE5B,KAAK,MAAM,CAACmD,SAAS,EAAEC,WAAW,CAAC,IAAIvD,MAAM,CAACwD,OAAO,CAAClG,cAAc,CAAC,EAAE;IACrE,IAAIiG,WAAW,CAACrD,MAAM,GAAG,CAAC,EAAE;MAC1B,MAAMuD,YAAY,GAAGF,WAAW,CAAC7D,GAAG,CAACgC,KAAK,IAAI;QAC5C,IAAI4B,SAAS,KAAK,SAAS,IAAIA,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAK,YAAY,EAAE;UACtF,OAAO,GAAGA,SAAS,QAAQ5B,KAAK,GAAG;QACrC,CAAC,MAAM;UACL,OAAO,GAAG4B,SAAS,QAAQ5B,KAAK,CAACgC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG;QACzD;MACF,CAAC,CAAC;MAEFvD,iBAAiB,CAACwD,IAAI,CAAC,IAAIF,YAAY,CAACnF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;IAC1D;EACF;EAEA,OAAO6B,iBAAiB;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoB,aAAaA,CAACqC,YAAY,EAAEtG,cAAc,EAAE;EACnD,MAAMoB,MAAM,GAAG,CAAC,CAAC;EACjB,IAAIkF,YAAY,EAAE;IAChB,KAAK,MAAM,CAACN,SAAS,EAAEC,WAAW,CAAC,IAAIvD,MAAM,CAACwD,OAAO,CAACI,YAAY,CAAC,EAAE;MACnE,IAAI3G,eAAe,CAAC0B,YAAY,CAACkF,QAAQ,CAACP,SAAS,CAAC,EAAE;QACpD5E,MAAM,CAAC4E,SAAS,CAAC,GAAGC,WAAW,CAAC7D,GAAG,CAACoE,KAAK;UAAA,IAAAC,qBAAA;UAAA,OAAK;YAC5CrC,KAAK,EAAEoC,KAAK,CAACpC,KAAK;YAClBjD,KAAK,EAAEqF,KAAK,CAACrF,KAAK;YAClBuF,QAAQ,EAAE,EAAAD,qBAAA,GAAAzG,cAAc,CAACgG,SAAS,CAAC,cAAAS,qBAAA,uBAAzBA,qBAAA,CAA2BF,QAAQ,CAACC,KAAK,CAACpC,KAAK,CAAC,KAAI;UAChE,CAAC;QAAA,CAAC,CAAC;MACL;IACF;EACF;EACA,OAAOhD,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS+C,cAAcA,CAACQ,OAAO,EAAE;EAC/B,OAAOA,OAAO,CAACvC,GAAG,CAACoC,IAAI,IAAI;IACzB;IACA,IAAIA,IAAI,CAAC,oBAAoB,CAAC,IAC1BA,IAAI,CAAC,oBAAoB,CAAC,CAACmC,WAAW,IACtCnC,IAAI,CAAC,oBAAoB,CAAC,CAACmC,WAAW,CAAC/D,MAAM,GAAG,CAAC,EAAE;MACrD,OAAO;QACL,GAAG4B,IAAI;QACPoC,sBAAsB,EAAEpC,IAAI,CAAC,oBAAoB,CAAC,CAACmC,WAAW,CAAC,CAAC;MAClE,CAAC;IACH;IACA,OAAOnC,IAAI;EACb,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASF,sBAAsBA,CAAC9B,OAAO,EAAE;EACvC,IAAI,CAACA,OAAO,EAAE,OAAO,IAAI;EAEzB,OAAOA,OAAO,CAACJ,GAAG,CAACyE,MAAM,KAAK;IAC5BjD,IAAI,EAAEiD,MAAM,CAACjD,IAAI;IACjBkD,UAAU,EAAED,MAAM,CAACC,UAAU;IAC7BC,KAAK,EAAEF,MAAM,CAACE;EAChB,CAAC,CAAC,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAejD,cAAcA,CAACX,QAAQ,EAAEQ,SAAS,EAAE;EACjD,IAAI;IAAA,IAAAqD,gBAAA;IACF,MAAMC,SAAS,GAAGhE,IAAI,CAACiE,KAAK,CAACvD,SAAS,CAAC;IACvC,OAAO,IAAIiC,KAAK,CAAC,cAAc,EAAAoB,gBAAA,GAAAC,SAAS,CAACpD,KAAK,cAAAmD,gBAAA,uBAAfA,gBAAA,CAAiBG,OAAO,KAAIhE,QAAQ,CAAC2C,UAAU,EAAE,CAAC;EACnF,CAAC,CAAC,OAAOsB,UAAU,EAAE;IACnB,OAAO,IAAIxB,KAAK,CAAC,cAAczC,QAAQ,CAAC0C,MAAM,IAAI1C,QAAQ,CAAC2C,UAAU,EAAE,CAAC;EAC1E;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}