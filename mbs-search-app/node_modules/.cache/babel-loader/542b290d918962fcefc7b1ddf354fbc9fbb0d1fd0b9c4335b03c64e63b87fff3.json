{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { fetchAllResultsForExport } from '../services/searchService';\nimport { downloadFile, convertToCSV, escapeCSV, formatDate } from '../utils';\nimport { EXPORT_CONFIG, UI_CONFIG } from '../config';\n\n/**\n * Custom hook for handling data exports\n * @returns {Object} Export methods and state\n */\nconst useExport = () => {\n  _s();\n  const [isExporting, setIsExporting] = useState(false);\n  const [exportProgress, setExportProgress] = useState(0);\n  const [exportStatus, setExportStatus] = useState('');\n\n  // Listen for progress events\n  useEffect(() => {\n    const progressListener = event => {\n      if (event.detail && typeof event.detail.progress === 'number') {\n        setExportProgress(event.detail.progress);\n      }\n    };\n    window.addEventListener('export-progress', progressListener);\n    return () => {\n      window.removeEventListener('export-progress', progressListener);\n    };\n  }, []);\n\n  /**\n   * Export search results to a file\n   * @param {string} query - Search query\n   * @param {Object} selectedFacets - Selected facet filters\n   * @param {string} sortBy - Sort option\n   * @param {string} queryType - Query type (simple or semantic)\n   * @param {number} fuzzyLevel - Fuzzy search level\n   * @param {string} format - Export format (csv or json)\n   * @returns {Promise<void>}\n   */\n  const exportData = useCallback(async (query, selectedFacets, sortBy, queryType = 'simple', fuzzyLevel = 0, format) => {\n    try {\n      setIsExporting(true);\n      setExportProgress(5);\n      setExportStatus('Preparing export...');\n\n      // Fetch all results for export\n      const allResults = await fetchAllResultsForExport(query, selectedFacets, sortBy, queryType, fuzzyLevel);\n      if (allResults.length === 0) {\n        setExportStatus('No results to export');\n        return;\n      }\n      setExportProgress(75);\n      setExportStatus(`Processing ${allResults.length} results...`);\n      const filename = `${EXPORT_CONFIG.FILENAME_PREFIX}-${new Date().toISOString().slice(0, 10)}`;\n      if (format === EXPORT_CONFIG.FORMATS.CSV) {\n        // Map each item to a CSV row\n        const rowMapper = item => [item.ItemNum || '', escapeCSV(item.Description || ''), item.ScheduleFee || '', escapeCSV(item.CategoryDescription || ''), escapeCSV(item.GroupDescription || ''), item.ItemType || '', formatDate(item.ItemStartDate)].join(',');\n\n        // Create CSV content\n        const csvContent = convertToCSV(EXPORT_CONFIG.CSV_HEADERS, allResults, rowMapper);\n        setExportProgress(90);\n        setExportStatus('Creating CSV file...');\n\n        // Create a blob and download\n        const blob = new Blob([csvContent], {\n          type: 'text/csv;charset=utf-8;'\n        });\n        downloadFile(blob, `${filename}.csv`);\n        setExportStatus(`Successfully exported ${allResults.length} items to CSV`);\n      } else if (format === EXPORT_CONFIG.FORMATS.JSON) {\n        // Create a simplified version of the results for JSON export\n        const jsonData = allResults.map(item => {\n          const result = {};\n\n          // Map fields according to the configuration\n          Object.entries(EXPORT_CONFIG.JSON_FIELDS).forEach(([sourceField, targetField]) => {\n            result[targetField] = sourceField === 'ItemStartDate' ? formatDate(item[sourceField]) : item[sourceField];\n          });\n          return result;\n        });\n        setExportProgress(90);\n        setExportStatus('Creating JSON file...');\n\n        // Create a blob and download\n        const blob = new Blob([JSON.stringify(jsonData, null, 2)], {\n          type: 'application/json'\n        });\n        downloadFile(blob, `${filename}.json`);\n        setExportStatus(`Successfully exported ${allResults.length} items to JSON`);\n      }\n      setExportProgress(100);\n\n      // Reset export state after a delay\n      setTimeout(() => {\n        setIsExporting(false);\n        setExportProgress(0);\n        setExportStatus('');\n      }, UI_CONFIG.TOAST_DURATION);\n    } catch (error) {\n      console.error('Error exporting results:', error);\n      setExportProgress(0);\n      setExportStatus(`Error exporting results: ${error.message}`);\n\n      // Reset export state after a delay\n      setTimeout(() => {\n        setIsExporting(false);\n        setExportStatus('');\n      }, UI_CONFIG.TOAST_DURATION);\n    }\n  }, []);\n  return {\n    exportData,\n    exportProgress,\n    exportStatus,\n    isExporting\n  };\n};\n_s(useExport, \"jQ63V0JeT+vD7wD4v1V1KtDfjGE=\");\nexport default useExport;","map":{"version":3,"names":["useState","useEffect","useCallback","fetchAllResultsForExport","downloadFile","convertToCSV","escapeCSV","formatDate","EXPORT_CONFIG","UI_CONFIG","useExport","_s","isExporting","setIsExporting","exportProgress","setExportProgress","exportStatus","setExportStatus","progressListener","event","detail","progress","window","addEventListener","removeEventListener","exportData","query","selectedFacets","sortBy","queryType","fuzzyLevel","format","allResults","length","filename","FILENAME_PREFIX","Date","toISOString","slice","FORMATS","CSV","rowMapper","item","ItemNum","Description","ScheduleFee","CategoryDescription","GroupDescription","ItemType","ItemStartDate","join","csvContent","CSV_HEADERS","blob","Blob","type","JSON","jsonData","map","result","Object","entries","JSON_FIELDS","forEach","sourceField","targetField","stringify","setTimeout","TOAST_DURATION","error","console","message"],"sources":["C:/Projects/MBSSearchReact/mbs-search-app/src/hooks/useExport.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { fetchAllResultsForExport } from '../services/searchService';\nimport { downloadFile, convertToCSV, escapeCSV, formatDate } from '../utils';\nimport { EXPORT_CONFIG, UI_CONFIG } from '../config';\n\n/**\n * Custom hook for handling data exports\n * @returns {Object} Export methods and state\n */\nconst useExport = () => {\n  const [isExporting, setIsExporting] = useState(false);\n  const [exportProgress, setExportProgress] = useState(0);\n  const [exportStatus, setExportStatus] = useState('');\n\n  // Listen for progress events\n  useEffect(() => {\n    const progressListener = (event) => {\n      if (event.detail && typeof event.detail.progress === 'number') {\n        setExportProgress(event.detail.progress);\n      }\n    };\n    \n    window.addEventListener('export-progress', progressListener);\n    \n    return () => {\n      window.removeEventListener('export-progress', progressListener);\n    };\n  }, []);\n\n  /**\n   * Export search results to a file\n   * @param {string} query - Search query\n   * @param {Object} selectedFacets - Selected facet filters\n   * @param {string} sortBy - Sort option\n   * @param {string} queryType - Query type (simple or semantic)\n   * @param {number} fuzzyLevel - Fuzzy search level\n   * @param {string} format - Export format (csv or json)\n   * @returns {Promise<void>}\n   */\n  const exportData = useCallback(async (\n    query, \n    selectedFacets, \n    sortBy, \n    queryType = 'simple', \n    fuzzyLevel = 0,\n    format\n  ) => {\n    try {\n      setIsExporting(true);\n      setExportProgress(5);\n      setExportStatus('Preparing export...');\n      \n      // Fetch all results for export\n      const allResults = await fetchAllResultsForExport(\n        query, \n        selectedFacets, \n        sortBy, \n        queryType, \n        fuzzyLevel\n      );\n      \n      if (allResults.length === 0) {\n        setExportStatus('No results to export');\n        return;\n      }\n      \n      setExportProgress(75);\n      setExportStatus(`Processing ${allResults.length} results...`);\n      \n      const filename = `${EXPORT_CONFIG.FILENAME_PREFIX}-${new Date().toISOString().slice(0, 10)}`;\n      \n      if (format === EXPORT_CONFIG.FORMATS.CSV) {\n        // Map each item to a CSV row\n        const rowMapper = (item) => [\n          item.ItemNum || '',\n          escapeCSV(item.Description || ''),\n          item.ScheduleFee || '',\n          escapeCSV(item.CategoryDescription || ''),\n          escapeCSV(item.GroupDescription || ''),\n          item.ItemType || '',\n          formatDate(item.ItemStartDate)\n        ].join(',');\n        \n        // Create CSV content\n        const csvContent = convertToCSV(\n          EXPORT_CONFIG.CSV_HEADERS,\n          allResults,\n          rowMapper\n        );\n        \n        setExportProgress(90);\n        setExportStatus('Creating CSV file...');\n        \n        // Create a blob and download\n        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n        downloadFile(blob, `${filename}.csv`);\n        \n        setExportStatus(`Successfully exported ${allResults.length} items to CSV`);\n      } else if (format === EXPORT_CONFIG.FORMATS.JSON) {\n        // Create a simplified version of the results for JSON export\n        const jsonData = allResults.map(item => {\n          const result = {};\n          \n          // Map fields according to the configuration\n          Object.entries(EXPORT_CONFIG.JSON_FIELDS).forEach(([sourceField, targetField]) => {\n            result[targetField] = sourceField === 'ItemStartDate' \n              ? formatDate(item[sourceField])\n              : item[sourceField];\n          });\n          \n          return result;\n        });\n        \n        setExportProgress(90);\n        setExportStatus('Creating JSON file...');\n        \n        // Create a blob and download\n        const blob = new Blob([JSON.stringify(jsonData, null, 2)], { type: 'application/json' });\n        downloadFile(blob, `${filename}.json`);\n        \n        setExportStatus(`Successfully exported ${allResults.length} items to JSON`);\n      }\n      \n      setExportProgress(100);\n      \n      // Reset export state after a delay\n      setTimeout(() => {\n        setIsExporting(false);\n        setExportProgress(0);\n        setExportStatus('');\n      }, UI_CONFIG.TOAST_DURATION);\n    } catch (error) {\n      console.error('Error exporting results:', error);\n      setExportProgress(0);\n      setExportStatus(`Error exporting results: ${error.message}`);\n      \n      // Reset export state after a delay\n      setTimeout(() => {\n        setIsExporting(false);\n        setExportStatus('');\n      }, UI_CONFIG.TOAST_DURATION);\n    }\n  }, []);\n\n  return {\n    exportData,\n    exportProgress,\n    exportStatus,\n    isExporting\n  };\n};\n\nexport default useExport;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}