{"ast":null,"code":"/**\n * Utility functions for the MBS Search application\n */\n\n/**\n * Format a date string to Australian date format (DD/MM/YYYY)\n * @param {string} dateString - ISO date string\n * @returns {string} - Formatted date string\n */\nexport const formatDate = dateString => {\n  if (!dateString) return '';\n  return new Date(dateString).toLocaleDateString('en-AU');\n};\n\n/**\n * Create a file download from data\n * @param {Blob} blob - The blob to download\n * @param {string} filename - The filename\n */\nexport const downloadFile = (blob, filename) => {\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', filename);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n\n/**\n * Convert data to CSV format\n * @param {Array} headers - CSV header row\n * @param {Array} data - Array of objects to convert\n * @param {Function} rowMapper - Function to map each object to a row array\n * @returns {string} - CSV content\n */\nexport const convertToCSV = (headers, data, rowMapper) => {\n  const headerRow = headers.join(',');\n  const rows = data.map(rowMapper);\n  return [headerRow, ...rows].join('\\n');\n};\n\n/**\n * Escape a string for CSV (handle quotes)\n * @param {string} str - String to escape\n * @returns {string} - Escaped string\n */\nexport const escapeCSV = str => {\n  if (!str) return '';\n  return `\"${String(str).replace(/\"/g, '\"\"')}\"`;\n};\n\n/**\n * Debounce a function call\n * @param {Function} func - Function to debounce\n * @param {number} wait - Wait time in milliseconds\n * @returns {Function} - Debounced function\n */\nexport const debounce = (func, wait) => {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\n/**\n * Get sort parameters for Azure Cognitive Search\n * @param {string} sortOption - Sort option string\n * @param {string} query - Search query\n * @returns {string} - Sort parameter for Azure Search\n */\nexport const getSortParams = (sortOption, query) => {\n  if (sortOption !== 'relevance') {\n    return sortOption;\n  }\n\n  // For non-empty queries, sort by search score by default\n  if (query && query.trim() !== '') {\n    return 'search.score() desc';\n  }\n\n  // For empty queries, sort by ItemNum by default\n  return 'ItemNum asc';\n};\n\n/**\n * Create a custom event with progress information\n * @param {number} progress - Progress percentage (0-100)\n */\nexport const emitProgressEvent = progress => {\n  window.dispatchEvent(new CustomEvent('export-progress', {\n    detail: {\n      progress\n    }\n  }));\n};","map":{"version":3,"names":["formatDate","dateString","Date","toLocaleDateString","downloadFile","blob","filename","url","URL","createObjectURL","link","document","createElement","setAttribute","style","visibility","body","appendChild","click","removeChild","convertToCSV","headers","data","rowMapper","headerRow","join","rows","map","escapeCSV","str","String","replace","debounce","func","wait","timeout","executedFunction","args","later","clearTimeout","setTimeout","getSortParams","sortOption","query","trim","emitProgressEvent","progress","window","dispatchEvent","CustomEvent","detail"],"sources":["C:/Projects/MBSSearchReact/mbs-search-app/src/utils/index.js"],"sourcesContent":["/**\n * Utility functions for the MBS Search application\n */\n\n/**\n * Format a date string to Australian date format (DD/MM/YYYY)\n * @param {string} dateString - ISO date string\n * @returns {string} - Formatted date string\n */\nexport const formatDate = (dateString) => {\n  if (!dateString) return '';\n  return new Date(dateString).toLocaleDateString('en-AU');\n};\n\n/**\n * Create a file download from data\n * @param {Blob} blob - The blob to download\n * @param {string} filename - The filename\n */\nexport const downloadFile = (blob, filename) => {\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.setAttribute('href', url);\n  link.setAttribute('download', filename);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n\n/**\n * Convert data to CSV format\n * @param {Array} headers - CSV header row\n * @param {Array} data - Array of objects to convert\n * @param {Function} rowMapper - Function to map each object to a row array\n * @returns {string} - CSV content\n */\nexport const convertToCSV = (headers, data, rowMapper) => {\n  const headerRow = headers.join(',');\n  const rows = data.map(rowMapper);\n  return [headerRow, ...rows].join('\\n');\n};\n\n/**\n * Escape a string for CSV (handle quotes)\n * @param {string} str - String to escape\n * @returns {string} - Escaped string\n */\nexport const escapeCSV = (str) => {\n  if (!str) return '';\n  return `\"${String(str).replace(/\"/g, '\"\"')}\"`;\n};\n\n/**\n * Debounce a function call\n * @param {Function} func - Function to debounce\n * @param {number} wait - Wait time in milliseconds\n * @returns {Function} - Debounced function\n */\nexport const debounce = (func, wait) => {\n  let timeout;\n  return function executedFunction(...args) {\n    const later = () => {\n      clearTimeout(timeout);\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n};\n\n/**\n * Get sort parameters for Azure Cognitive Search\n * @param {string} sortOption - Sort option string\n * @param {string} query - Search query\n * @returns {string} - Sort parameter for Azure Search\n */\nexport const getSortParams = (sortOption, query) => {\n  if (sortOption !== 'relevance') {\n    return sortOption;\n  }\n  \n  // For non-empty queries, sort by search score by default\n  if (query && query.trim() !== '') {\n    return 'search.score() desc';\n  }\n  \n  // For empty queries, sort by ItemNum by default\n  return 'ItemNum asc';\n};\n\n/**\n * Create a custom event with progress information\n * @param {number} progress - Progress percentage (0-100)\n */\nexport const emitProgressEvent = (progress) => {\n  window.dispatchEvent(\n    new CustomEvent('export-progress', { \n      detail: { progress } \n    })\n  );\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,GAAIC,UAAU,IAAK;EACxC,IAAI,CAACA,UAAU,EAAE,OAAO,EAAE;EAC1B,OAAO,IAAIC,IAAI,CAACD,UAAU,CAAC,CAACE,kBAAkB,CAAC,OAAO,CAAC;AACzD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAGA,CAACC,IAAI,EAAEC,QAAQ,KAAK;EAC9C,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;EACrC,MAAMK,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;EACxCF,IAAI,CAACG,YAAY,CAAC,MAAM,EAAEN,GAAG,CAAC;EAC9BG,IAAI,CAACG,YAAY,CAAC,UAAU,EAAEP,QAAQ,CAAC;EACvCI,IAAI,CAACI,KAAK,CAACC,UAAU,GAAG,QAAQ;EAChCJ,QAAQ,CAACK,IAAI,CAACC,WAAW,CAACP,IAAI,CAAC;EAC/BA,IAAI,CAACQ,KAAK,CAAC,CAAC;EACZP,QAAQ,CAACK,IAAI,CAACG,WAAW,CAACT,IAAI,CAAC;AACjC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMU,YAAY,GAAGA,CAACC,OAAO,EAAEC,IAAI,EAAEC,SAAS,KAAK;EACxD,MAAMC,SAAS,GAAGH,OAAO,CAACI,IAAI,CAAC,GAAG,CAAC;EACnC,MAAMC,IAAI,GAAGJ,IAAI,CAACK,GAAG,CAACJ,SAAS,CAAC;EAChC,OAAO,CAACC,SAAS,EAAE,GAAGE,IAAI,CAAC,CAACD,IAAI,CAAC,IAAI,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,SAAS,GAAIC,GAAG,IAAK;EAChC,IAAI,CAACA,GAAG,EAAE,OAAO,EAAE;EACnB,OAAO,IAAIC,MAAM,CAACD,GAAG,CAAC,CAACE,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG;AAC/C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAACC,IAAI,EAAEC,IAAI,KAAK;EACtC,IAAIC,OAAO;EACX,OAAO,SAASC,gBAAgBA,CAAC,GAAGC,IAAI,EAAE;IACxC,MAAMC,KAAK,GAAGA,CAAA,KAAM;MAClBC,YAAY,CAACJ,OAAO,CAAC;MACrBF,IAAI,CAAC,GAAGI,IAAI,CAAC;IACf,CAAC;IACDE,YAAY,CAACJ,OAAO,CAAC;IACrBA,OAAO,GAAGK,UAAU,CAACF,KAAK,EAAEJ,IAAI,CAAC;EACnC,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,aAAa,GAAGA,CAACC,UAAU,EAAEC,KAAK,KAAK;EAClD,IAAID,UAAU,KAAK,WAAW,EAAE;IAC9B,OAAOA,UAAU;EACnB;;EAEA;EACA,IAAIC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAChC,OAAO,qBAAqB;EAC9B;;EAEA;EACA,OAAO,aAAa;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAIC,QAAQ,IAAK;EAC7CC,MAAM,CAACC,aAAa,CAClB,IAAIC,WAAW,CAAC,iBAAiB,EAAE;IACjCC,MAAM,EAAE;MAAEJ;IAAS;EACrB,CAAC,CACH,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}